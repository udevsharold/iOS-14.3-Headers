/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, March 2, 2021 at 11:19:16 AM US Time
* Operating System: Version 14.3 (Build 18C66)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKCameraController.h>
#import <libobjc.A.dylib/VKGesturingCameraController.h>

@class NSString;

@interface VKMuninCameraController : VKCameraController <VKGesturingCameraController> {

	MuninSceneLogic* _muninSceneLogic;
	shared_ptr<md::TaskContext>* _taskContext;
	optional<(anonymous namespace)::PointSegment>* _currentPointSegment;
	shared_ptr<(anonymous namespace)::PathAnimator>* _pathAnimator;
	unique_ptr<(anonymous namespace)::BumpAnimator, std::__1::default_delete<(anonymous namespace)::BumpAnimator> >* _bumpAnimator;
	BOOL _panning;
	BOOL _panStopping;
	Matrix<float, 2, 1> _panLocation;
	Matrix<float, 2, 1> _panTranslation;
	retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>* _panAnimation;
	BOOL _pinching;
	Matrix<float, 2, 1> _pinchZoomOffset;
	Unit<RadianUnitDescription, double> _pinchStartFieldOfView;
	retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>* _pinchResetAnimation;
	BOOL _virtualParallaxEnabled;
	float _cameraOffsetFactor;
	retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>* _offsetAnimation;
	double _lastUpdateTime;
	Spring<double, 1, gdc::SpringType::Angular> _panSpring;
	Unit<RadianUnitDescription, double> _heading;
	Unit<RadianUnitDescription, double> _pitch;
	BOOL _restrictWidestFieldOfView;
	Unit<RadianUnitDescription, double> _widestFieldOfView;
	Coordinate3D<Radians, double> _rigPosition;
	CameraFrame<geo::Radians, double> _previousCameraFrame;
	unsigned long long _tapIndex;
	shared_ptr<geo::Task>* _preparePath;
	unique_ptr<(anonymous namespace)::PathAnimationDescription, std::__1::default_delete<(anonymous namespace)::PathAnimationDescription> >* _currentPathAnimation;
	unique_ptr<(anonymous namespace)::PendingPathAnimation, std::__1::default_delete<(anonymous namespace)::PendingPathAnimation> >* _pendingPathAnimation;

}

@property (assign,nonatomic) BOOL virtualParallaxEnabled;              //@synthesize virtualParallaxEnabled=_virtualParallaxEnabled - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)stopAnimations;
-(BOOL)restoreViewportFromInfo:(id)arg1 ;
-(void)setCamera:(id)arg1 ;
-(double)pitch;
-(id)viewportInfo;
-(void)updatePinchWithFocusPoint:(CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3 ;
-(void)pathAnimationPrepared:(PathAnimationDescription*)arg1 tap:(TapDescription*)arg2 preloadedViews:(unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > >*)arg3 ;
-(BOOL)canZoomOutForTileSize:(long long)arg1 ;
-(double)altitude;
-(CGSize)centerCoordinate;
-(void)updateWithTimestamp:(double)arg1 ;
-(void)transferGestureState:(id)arg1 ;
-(void)willStopPanningAtPoint:(CGPoint)arg1 withVelocity:(CGPoint)arg2 ;
-(void)moveAlongPath:(PathAnimationDescription*)arg1 tap:(TapDescription*)arg2 preloadedViews:(unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > >*)arg3 continued:(BOOL)arg4 ;
-(BOOL)isPathAnimationRunning;
-(Matrix<float, 2, 1>)screenPointWithOffset:(CGPoint)arg1 ;
-(double)maximumZoomLevelForTileSize:(long long)arg1 ;
-(double)_zoomRubberBandFov:(double)arg1 ;
-(BOOL)canZoomInForTileSize:(long long)arg1 ;
-(void)setWidestFieldOfView:(Unit<RadianUnitDescription, double>)arg1 ;
-(void)runBumpAnimation:(const Geocentric<double>*)arg1 targetPoint:(const Geocentric<double>*)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)pathAnimationComplete:(unsigned long long)arg1 ;
-(BOOL)virtualParallaxEnabled;
-(void)startPitchingWithFocusPoint:(CGPoint)arg1 ;
-(void)stopPanningAtPoint:(CGPoint)arg1 ;
-(void)selectLabelMarker:(const shared_ptr<md::LabelMarker>*)arg1 completion:(/*^block*/id)arg2 ;
-(Unit<RadianUnitDescription, double>)_verticalFieldOfView:(Unit<RadianUnitDescription, double>)arg1 ;
-(BOOL)cancelPendingMove;
-(double)currentZoomLevelForTileSize:(long long)arg1 ;
-(void)setVirtualParallaxEnabled:(BOOL)arg1 ;
-(double)heading;
-(BOOL)isAnimationsRunning;
-(void)startPanningAtPoint:(CGPoint)arg1 panAtStartPoint:(BOOL)arg2 ;
-(Unit<RadianUnitDescription, double>)_pitchForScreenPoint:(Matrix<float, 2, 1>)arg1 ;
-(const CollectionPoint*)currentPoint;
-(void)updateRotationWithFocusPoint:(CGPoint)arg1 newValue:(double)arg2 ;
-(BOOL)isBumpAnimationRunning;
-(double)zoomLevelAdjustmentForTileSize:(long long)arg1 ;
-(void)startRotatingWithFocusPoint:(CGPoint)arg1 ;
-(void)updatePanWithTranslation:(CGPoint)arg1 ;
-(id)initWithTaskContext:(shared_ptr<md::TaskContext>*)arg1 mapDataAccess:(MapDataAccess*)arg2 animationRunner:(AnimationRunner*)arg3 runLoopController:(RunLoopController*)arg4 cameraDelegate:(id)arg5 muninSceneLogic:(MuninSceneLogic*)arg6 ;
-(BOOL)cancelPendingMoveExceptBump;
-(void)setCurrentSegment:(PointSegment*)arg1 ;
-(void)animatePath:(vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> >*)arg1 animator:(const shared_ptr<(anonymous namespace)::PathAnimator>*)arg2 preloadedRequiredViews:(unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > >*)arg3 prePruneData:(BOOL)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)updatePitchWithFocusPoint:(CGPoint)arg1 translation:(double)arg2 ;
-(BOOL)isAnimationsRunningExceptBump;
-(double)topDownMinimumZoomLevelForTileSize:(long long)arg1 ;
-(void)setCenterCoordinate:(CGSize)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(long long)arg6 timingCurve:(/*^block*/id)arg7 completion:(/*^block*/id)arg8 ;
-(void)_setHeading:(Unit<RadianUnitDescription, double>)arg1 ;
-(BOOL)moveToPoint:(const CollectionPoint*)arg1 withHeading:(Unit<RadianUnitDescription, double>)arg2 withPitch:(Unit<RadianUnitDescription, double>)arg3 animated:(BOOL)arg4 completionHandler:(/*^block*/id)arg5 ;
-(BOOL)tapAtPoint:(CGPoint)arg1 ;
-(void)stopPinchingWithFocusPoint:(CGPoint)arg1 ;
-(void)animatePath:(vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> >*)arg1 withTarget:(const Geocentric<double>*)arg2 lookAtTarget:(BOOL)arg3 constantLod:(BOOL)arg4 prePruneData:(BOOL)arg5 completionHandler:(/*^block*/id)arg6 ;
-(void)stopPitchingWithFocusPoint:(CGPoint)arg1 ;
-(void)setCurrentPoint:(const CollectionPoint*)arg1 secondaryPoint:(optional<md::mun::CollectionPoint>*)arg2 ;
-(void)zoomAnimatedWithDuration:(Unit<RadianUnitDescription, double>)arg1 duration:(float)arg2 completion:(/*^block*/id)arg3 ;
-(void)setCameraFrame:(CameraFrame<geo::Radians, double>)arg1 ;
-(void)stopAnimationsExceptBump;
-(void)zoomAnimated:(Unit<RadianUnitDescription, double>)arg1 completion:(/*^block*/id)arg2 ;
-(void)stopRotatingWithFocusPoint:(CGPoint)arg1 ;
-(double)minimumZoomLevelForTileSize:(long long)arg1 ;
-(Unit<RadianUnitDescription, double>)_horizontalFieldOfView:(Unit<RadianUnitDescription, double>)arg1 ;
-(void)startPinchingWithFocusPoint:(CGPoint)arg1 ;
-(void)updatePitchWithFocusPoint:(CGPoint)arg1 degrees:(double)arg2 ;
-(void)updateCurrentPointView:(BOOL)arg1 ;
-(void)zoom:(double)arg1 withFocusPoint:(CGPoint)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)setCurrentPoint:(const CollectionPoint*)arg1 ;
@end

