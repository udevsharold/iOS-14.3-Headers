/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, March 2, 2021 at 11:19:15 AM US Time
* Operating System: Version 14.3 (Build 18C66)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <VectorKit/VectorKit-Structs.h>
@class VKViewVolume, VKFootprint, VKCameraRegionRestriction;

@interface VKCamera : NSObject {

	RunLoopController* _runLoopController;
	SCD_Struct_VK30 _frustum;
	double _minHeight;
	double _maxHeight;
	double _maxPitch;
	double _terrainHeight;
	double _maxFarClipDistance;
	BOOL _needsUpdate;
	BOOL _updating;
	VKViewVolume* _viewVolume;
	VKFootprint* _footprint;
	double _tanHalfHorizFOV;
	double _tanHalfVerticalFOV;
	Matrix<double, 3, 1> _forward;
	Matrix<double, 3, 1> _right;
	Matrix<double, 3, 1> _up;
	double _fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
	double _distanceToGroundAndFarClipPlaneIntersection;
	double _screenHeightOfGroundAndFarClipPlaneIntersection;
	double _canonicalPitch;
	double _horizontalOffset;
	double _ndcZNear;
	double _aspectRatio;
	Unit<RadianUnitDescription, double> _verticalFieldOfView;
	double _near;
	double _far;
	double _width;
	double _height;
	RigidTransform<double, double> _transform;
	Matrix<double, 4, 4> _scaledViewMatrix;
	Matrix<double, 4, 4> _scaledProjectionMatrix;
	Matrix<double, 4, 4> _scaledViewProjectionMatrix;
	Matrix<double, 4, 4> _unscaledViewMatrix;
	Matrix<double, 4, 4> _unscaledProjectionMatrix;
	Matrix<double, 4, 4> _worldMatrix;
	double _maxHeightNoPitch;
	VKCameraRegionRestriction* _regionRestriction;
	optional<double> _minDistanceToGroundRestriction;
	optional<double> _maxDistanceToGroundRestriction;

}

@property (nonatomic,readonly) SCD_Struct_VK30 frustum; 
@property (assign,nonatomic) const Matrix<double* position; 
@property (assign,nonatomic) const Quaternion<double>* orientation; 
@property (assign,nonatomic) double aspectRatio;                                                    //@synthesize aspectRatio=_aspectRatio - In the implementation block
@property (nonatomic,readonly) Unit<RadianUnitDescription horizontalFieldOfView; 
@property (assign,nonatomic) Unit<RadianUnitDescription verticalFieldOfView; 
@property (nonatomic,readonly) double farClipDistance; 
@property (nonatomic,readonly) double nearClipDistance; 
@property (assign,nonatomic) double ndcZNear;                                                       //@synthesize ndcZNear=_ndcZNear - In the implementation block
@property (assign,nonatomic) VKCameraState cameraState; 
@property (assign,nonatomic) double minHeight;                                                      //@synthesize minHeight=_minHeight - In the implementation block
@property (assign,nonatomic) double maxHeight;                                                      //@synthesize maxHeight=_maxHeight - In the implementation block
@property (assign,nonatomic) double maxHeightNoPitch;                                               //@synthesize maxHeightNoPitch=_maxHeightNoPitch - In the implementation block
@property (assign,nonatomic) double maxPitch;                                                       //@synthesize maxPitch=_maxPitch - In the implementation block
@property (assign,nonatomic) optional<double> minDistanceToGroundRestriction;                       //@synthesize minDistanceToGroundRestriction=_minDistanceToGroundRestriction - In the implementation block
@property (assign,nonatomic) optional<double> maxDistanceToGroundRestriction;                       //@synthesize maxDistanceToGroundRestriction=_maxDistanceToGroundRestriction - In the implementation block
@property (nonatomic,retain) VKCameraRegionRestriction * regionRestriction;                         //@synthesize regionRestriction=_regionRestriction - In the implementation block
@property (assign,nonatomic) double terrainHeight;                                                  //@synthesize terrainHeight=_terrainHeight - In the implementation block
@property (nonatomic,readonly) VKViewVolume * viewVolume; 
@property (nonatomic,readonly) VKFootprint * footprint; 
@property (nonatomic,readonly) Matrix<double upVector; 
@property (nonatomic,readonly) Matrix<double rightVector; 
@property (nonatomic,readonly) Matrix<double forwardVector; 
@property (nonatomic,readonly) Matrix<double groundPoint; 
@property (nonatomic,readonly) double pitch; 
@property (nonatomic,readonly) double yaw; 
@property (nonatomic,readonly) double tanHalfHorizFOV; 
@property (nonatomic,readonly) double tanHalfVerticalFOV; 
@property (nonatomic,readonly) double distanceToGroundAndFarClipPlaneIntersection;                  //@synthesize distanceToGroundAndFarClipPlaneIntersection=_distanceToGroundAndFarClipPlaneIntersection - In the implementation block
@property (nonatomic,readonly) double screenHeightOfGroundAndFarClipPlaneIntersection;              //@synthesize screenHeightOfGroundAndFarClipPlaneIntersection=_screenHeightOfGroundAndFarClipPlaneIntersection - In the implementation block
@property (assign,nonatomic) double fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;              //@synthesize fractionOfScreenAboveFarClipPlaneAtCanonicalPitch=_fractionOfScreenAboveFarClipPlaneAtCanonicalPitch - In the implementation block
@property (assign,nonatomic) double canonicalPitch;                                                 //@synthesize canonicalPitch=_canonicalPitch - In the implementation block
@property (assign,nonatomic) double horizontalOffset;                                               //@synthesize horizontalOffset=_horizontalOffset - In the implementation block
@property (nonatomic,readonly) const Matrix<double* scaledViewMatrix; 
@property (nonatomic,readonly) const Matrix<double* scaledProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* scaledViewProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* unscaledViewMatrix; 
@property (nonatomic,readonly) const Matrix<double* unscaledProjectionMatrix; 
-(double)maxHeightNoPitch;
-(View<double>)view:(ViewSize)arg1 ;
-(double)pitch;
-(void)setAspectRatio:(double)arg1 ;
-(Matrix<double, 3, 1>)groundPlaneIntersectionPoint;
-(void)setNeedsUpdate;
-(const Matrix<double*)unscaledProjectionMatrix;
-(double)yaw;
-(void)setCanonicalPitch:(double)arg1 ;
-(void)setMercatorPosition:(const Mercator3<double>*)arg1 ;
-(void)setMaxHeightNoPitch:(double)arg1 ;
-(void)setHorizontalOffset:(double)arg1 ;
-(void)updateIfNeeded;
-(id)detailedDescription;
-(void)setMinHeight:(double)arg1 ;
-(float)zoomAtPoint:(CGPoint)arg1 ;
-(void)dealloc;
-(const Matrix<double*)scaledViewMatrix;
-(id)descriptionDictionaryRepresentation;
-(void)setMaxDistanceToGroundRestriction:(optional<double>)arg1 ;
-(Unit<RadianUnitDescription)verticalFieldOfView;
-(/*^block*/id)annotationCoordinateTest;
-(double)horizontalOffset;
-(double)terrainHeight;
-(const Matrix<double*)unscaledViewMatrix;
-(void)setOrientation:(const Quaternion<double>*)arg1 ;
-(double)depthForViewWidth:(double)arg1 ;
-(Matrix<double)rightVector;
-(Matrix<double)upVector;
-(CameraFrame<geo::Radians, double>)cameraFrame;
-(void)adjustClipPlanes;
-(double)fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
-(optional<gm::Matrix<double, 3, 1> >)groundPointFromScreenPoint:(CGPoint)arg1 atGroundLevel:(double)arg2 ;
-(const Quaternion<double>*)orientation;
-(Unit<RadianUnitDescription)horizontalFieldOfView;
-(id)description;
-(Mercator3<double>)mercatorPosition;
-(double)displayZoomLevel;
-(void)_setPosition:(const Matrix<double, 3, 1>*)arg1 ;
-(VKCameraRegionRestriction *)regionRestriction;
-(const Matrix<double*)scaledViewProjectionMatrix;
-(double)ndcZNear;
-(void)setMinDistanceToGroundRestriction:(optional<double>)arg1 ;
-(const Matrix<double*)position;
-(void)setMaxPitch:(double)arg1 ;
-(void)setRegionRestriction:(VKCameraRegionRestriction *)arg1 ;
-(float)zoomAtCentrePoint;
-(double)minHeight;
-(void)setFractionOfScreenAboveFarClipPlaneAtCanonicalPitch:(double)arg1 ;
-(optional<double>)minDistanceToGroundRestriction;
-(void)setPosition:(const Matrix<double*)arg1 ;
-(Matrix<double)forwardVector;
-(double)farClipDistance;
-(double)maxHeight;
-(double)widthOfViewAtDepth:(double)arg1 ;
-(void)setTerrainHeight:(double)arg1 ;
-(Matrix<double)groundPoint;
-(void)setNdcZNear:(double)arg1 ;
-(double)tanHalfVerticalFOV;
-(double)nearClipDistance;
-(void)setCameraState:(VKCameraState)arg1 ;
-(double)distanceToGroundAndFarClipPlaneIntersection;
-(double)screenHeightOfGroundAndFarClipPlaneIntersection;
-(void)setMaxHeight:(double)arg1 ;
-(VKFootprint *)footprint;
-(double)canonicalPitch;
-(optional<gm::Matrix<double, 3, 1> >)groundPointFromScreenPoint:(CGPoint)arg1 ;
-(/*^block*/id)annotationRectTest;
-(VKViewVolume *)viewVolume;
-(double)aspectRatio;
-(id)initWithRunLoopController:(RunLoopController*)arg1 ;
-(VKCameraState)cameraState;
-(double)tanHalfHorizFOV;
-(SCD_Struct_VK30)frustum;
-(CGPoint)screenPointFromGroundPoint:(const Mercator3<double>*)arg1 ;
-(double)maxPitch;
-(void)setVerticalFieldOfView:(Unit<RadianUnitDescription)arg1 ;
-(optional<double>)maxDistanceToGroundRestriction;
-(const Matrix<double*)scaledProjectionMatrix;
@end

