/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, March 2, 2021 at 10:57:58 AM US Time
* Operating System: Version 14.3 (Build 18C66)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, HDHFDataStoreDelegate;
#import <HealthDaemon/HealthDaemon-Structs.h>
@class NSObject, NSString, NSURL;

@interface HDHFDataStore : NSObject {

	shared_ptr<health::VirtualFilesystem>* _fileSystem;
	os_unfair_lock_s _lock;
	shared_ptr<health::DataStore>* _highFrequencyDataStore;
	AB _invalidated;
	AB _hasOpenStore;
	NSObject*<OS_dispatch_queue> _openQueue;
	long long _openAttempt;
	id<HDHFDataStoreDelegate> _delegate;
	NSString* _fileSystemPath;

}

@property (nonatomic,copy,readonly) NSURL * dataStoreURL; 
@property (nonatomic,copy,readonly) NSURL * directoryURL; 
@property (assign,nonatomic,__weak) id<HDHFDataStoreDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,copy,readonly) NSString * fileSystemPath;                       //@synthesize fileSystemPath=_fileSystemPath - In the implementation block
@property (nonatomic,readonly) long long rebuildState; 
+(BOOL)_errorIndicatesCorruption:(id)arg1 ;
+(BOOL)_shouldRequestRebuildForFailure:(long long)arg1 code:(int)arg2 ;
+(BOOL)_shouldRequestRebuildForError:(id)arg1 ;
-(id)initWithPath:(id)arg1 ;
-(id)writeaheadLogURLForHFDAt:(id)arg1 ;
-(void)setRebuildState:(long long)arg1 ;
-(shared_ptr<health::DataStore>*)_highFrequencyDataStoreWithError:(id*)arg1 ;
-(void)unitTest_resetRebuildState;
-(NSURL *)dataStoreURL;
-(BOOL)_lock_archiveHFD:(id*)arg1 ;
-(void)requestHFDRebuild;
-(BOOL)_lock_prepareForRecovery:(id*)arg1 ;
-(BOOL)moveHFDAsideWithoutOverwritingFrom:(id)arg1 to:(id)arg2 error:(id*)arg3 ;
-(id)_walPathForHFDAtPath:(id)arg1 ;
-(void)dealloc;
-(shared_ptr<health::DataStore>*)_lock_primitiveOpenHighFrequencyDataStoreWithError:(id*)arg1 ;
-(BOOL)moveFileOnlyIfDestinationEmptyFrom:(id)arg1 to:(id)arg2 error:(id*)arg3 ;
-(BOOL)deleteFileAt:(id)arg1 error:(id*)arg2 ;
-(BOOL)deleteHFDAt:(id)arg1 error:(id*)arg2 ;
-(unique_ptr<health::DataStore, std::__1::default_delete<health::DataStore> >*)dataStoreAtURL:(id)arg1 filesystem:(const shared_ptr<health::VirtualFilesystem>*)arg2 allowCheckpoint:(BOOL)arg3 error:(id*)arg4 ;
-(id)fileManager;
-(BOOL)retryDecompressionAfterError:(id)arg1 ;
-(BOOL)_lock_performNextRebuildStepForState:(long long)arg1 error:(id*)arg2 ;
-(long long)rebuildState;
-(id)diagnosticDescription;
-(BOOL)_lock_deleteCompressedArchive:(id*)arg1 ;
-(NSURL *)directoryURL;
-(id)description;
-(BOOL)_lock_rebuildIfNeeded:(id*)arg1 ;
-(/*^block*/id)flushHandlerForInvalidation:(BOOL)arg1 ;
-(BOOL)_lock_rollCloudSyncOwnerIdentifier:(id*)arg1 ;
-(NSString *)fileSystemPath;
-(BOOL)_lock_performPostRestoreCleanup:(id*)arg1 ;
-(void)setDelegate:(id<HDHFDataStoreDelegate>)arg1 ;
-(BOOL)_requiresRebuildForState:(long long)arg1 ;
-(id)initWithPath:(id)arg1 fileSystem:(shared_ptr<health::VirtualFilesystem>*)arg2 ;
-(BOOL)accessStoreWithError:(id*)arg1 block:(/*^block*/id)arg2 ;
-(BOOL)discardStoreWithError:(id*)arg1 ;
-(BOOL)_lock_restoreHFDFromArchive:(id*)arg1 ;
-(shared_ptr<health::DataStore>*)_lock_highFrequencyDataStoreWithError:(id*)arg1 ;
-(void)unitTest_requestRebuild;
-(BOOL)_convertExceptionsToError:(id*)arg1 inBlock:(/*^block*/id)arg2 ;
-(id<HDHFDataStoreDelegate>)delegate;
-(void)_lock_checkForLargeSparseHFD;
-(BOOL)_lock_openHighFrequencyDataStoreWithError:(id*)arg1 ;
@end

